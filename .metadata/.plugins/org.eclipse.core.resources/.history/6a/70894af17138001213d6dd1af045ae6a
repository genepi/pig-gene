package pigGene;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;

import org.apache.hadoop.mapreduce.InputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.pig.ResourceSchema;
import org.apache.pig.builtin.PigStorage;
import org.apache.pig.impl.logicalLayer.schema.Schema;
import org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema;
import org.apache.pig.impl.util.UDFContext;

public class PigGeneStorageUnmerged extends PigStorage {
	static ResourceSchema schema;

	static {
		final ArrayList<FieldSchema> fieldSchemaList = new ArrayList<FieldSchema>();
		fieldSchemaList.add(new FieldSchema("chrom", org.apache.pig.data.DataType.CHARARRAY));
		fieldSchemaList.add(new FieldSchema("pos", org.apache.pig.data.DataType.LONG));
		fieldSchemaList.add(new FieldSchema("id", org.apache.pig.data.DataType.CHARARRAY));
		fieldSchemaList.add(new FieldSchema("ref", org.apache.pig.data.DataType.CHARARRAY));
		fieldSchemaList.add(new FieldSchema("alt", org.apache.pig.data.DataType.CHARARRAY));
		fieldSchemaList.add(new FieldSchema("qual", org.apache.pig.data.DataType.DOUBLE));
		fieldSchemaList.add(new FieldSchema("filt", org.apache.pig.data.DataType.CHARARRAY));
		fieldSchemaList.add(new FieldSchema("info", org.apache.pig.data.DataType.CHARARRAY));
		fieldSchemaList.add(new FieldSchema("format", org.apache.pig.data.DataType.CHARARRAY));
		fieldSchemaList.add(new FieldSchema("genotype", org.apache.pig.data.DataType.CHARARRAY));
		// fieldSchemaList.add(new FieldSchema("file",
		// org.apache.pig.data.DataType.CHARARRAY));
		schema = new ResourceSchema(new Schema(fieldSchemaList));
	}

	public PigGeneStorageUnmerged() {
		this("\t", "");
	}

	public PigGeneStorageUnmerged(String delimiter) {
		this(delimiter, "");
	}

	public PigGeneStorageUnmerged(String delimiter, String options) {

	}

	// /**
	// * Constructs a Pig loader that uses specified character as a field
	// delimiter.
	// * <p>
	// * Understands the following options, which can be specified in the second
	// paramter:
	// * <ul>
	// * <li><code>-schema</code> Loads / Stores the schema of the relation
	// using a hidden JSON file.
	// * <li><code>-noschema</code> Ignores a stored schema during loading.
	// * <li><code>-tagsource</code> Appends input source file path to end of
	// each tuple. Make sure to set "pig.splitCombination" to false
	// * </ul>
	// * @param delimiter the single byte character that is used to separate
	// fields.
	// * @param options a list of options that can be used to modify PigStorage
	// behavior
	// * @throws ParseException
	// */
	// public PigStorage(String delimiter, String options) {
	// populateValidOptions();
	// fieldDel = StorageUtil.parseFieldDel(delimiter);
	// String[] optsArr = options.split(" ");
	// try {
	// configuredOptions = parser.parse(validOptions, optsArr);
	// isSchemaOn = configuredOptions.hasOption("schema");
	// dontLoadSchema = configuredOptions.hasOption("noschema");
	// tagSource = configuredOptions.hasOption(TAG_SOURCE_PATH);
	// } catch (ParseException e) {
	// HelpFormatter formatter = new HelpFormatter();
	// formatter.printHelp( "PigStorage(',', '[options]')", validOptions);
	// // We wrap this exception in a Runtime exception so that
	// // existing loaders that extend PigStorage don't break
	// throw new RuntimeException(e);
	// }
	// }

	@SuppressWarnings("rawtypes")
	@Override
	public InputFormat getInputFormat() {
		return new PigGeneInputFormatUnmerged();
	}

	@Override
	public ResourceSchema getSchema(final String location, final Job job) throws IOException {
		final Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass(), new String[] { signature });
		p.setProperty(signature + ".schema", schema.toString());
		return schema;
	}

}