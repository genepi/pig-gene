!piggene.serialisation.Workflow
name: testFastQ
description: 
workflow: 
-  comment: '-'
   input: input1
   input2: '-'
   operation: LOAD
   options: vcf
   options2: seqpig
   relation: reads
-  comment: '-'
   input: '-'
   input2: '-'
   operation: SCRIPT
   options: "REGISTER pigGene.jar;\nREGISTER SeqPig.jar;\nREGISTER hadoop-bam-5.1.jar;\nREGISTER sam-\
      1.76.jar;\nREGISTER picard-1.76.jar;\nREGISTER piggybank.jar;\nREGISTER datafu-0.0.9.jar;\n-- p\
      arameters:\n-- \_* inputpath\n-- \_* outputpath\n-- \_* parallelism (optional)\n\n\n\n\n-- Need\
      s datafu for the variance function: https://github.com/linkedin/datafu\n-- Needs piggybank for \
      the string LENGTH\n\n\n\n\n%default parallelism 1\nset default_parallel $parallelism;\n\n\n\n\n\
      -- speculative execution isn't helping us much, so turn it off\nset mapred.map.tasks.speculativ\
      e.execution false;\nset mapred.reduce.tasks.speculative.execution false;\n\n\n\n\n-- Use in-mem\
      ory aggregation, as possible\nset pig.exec.mapPartAgg true;\nset pig.exec.mapPartAgg.minReducti\
      on 5;\n\n\n\n\n-- new experimental Pig feature -- generates specialized typed classes for the t\
      uples\nset pig.schematuple on;\n\n\n\n\ndefine VAR datafu.pig.stats.VAR();\n-- Calculate min, t\
      he 25th, 50th, 75th percentiles, and the max\ndefine Quantile datafu.pig.stats.Quantile('5');\n\
      -- define StreamingQuantile datafu.pig.stats.StreamingQuantile('5');\ndefine STRLEN org.apache.\
      pig.piggybank.evaluation.string.LENGTH();\n\n\n\n\n--\n-- \_ start of script\n--\n\n\n\n\n-- \_\
      \ import reads\n-- reads = load '$inputpath' using fi.aalto.seqpig.io.FastqLoader();\nreads_by_\
      bases = FOREACH reads GENERATE fi.aalto.seqpig.UnalignedReadSplit(sequence, quality);\n\n\n\n\n\
      ------- read stats\n\n\n\n\n-- read length\nread_len = FOREACH reads GENERATE STRLEN(sequence);\n\
      read_len_counts = FOREACH (GROUP read_len BY $0) GENERATE group AS len, COUNT_STAR($1) as count\
      ;\n\n\n\n\n-- per sequence avg base quality\n-- read_q = FOREACH reads_by_bases GENERATE ROUND(\
      AVG($0.basequal)) as read_qual;\n-- read_q_counts = FOREACH (GROUP read_q BY read_qual) GENERAT\
      E group as avg_read_qual, COUNT_STAR($1) as count;\n\n\n\n\nread_seq_qual = FOREACH reads GENER\
      ATE quality;\navgbase_qual_counts = FOREACH (GROUP read_seq_qual ALL) GENERATE fi.aalto.seqpig.\
      stats.AvgBaseQualCounts($1.$0);\nformatted_avgbase_qual_counts = FOREACH avgbase_qual_counts GE\
      NERATE fi.aalto.seqpig.stats.FormatAvgBaseQualCounts($0);\n\n\n\n\n\n\n\n\n------- generate out\
      put\n\n\n\n\nSTORE read_len_counts INTO '$outputpath/read_len_counts';\n-- STORE read_q_counts \
      INTO '$outputpath/read_q_counts';\nSTORE formatted_avgbase_qual_counts INTO '$outputpath/read_q\
      _counts';\n"
   options2: '-'
   relation: script
