!piggene.serialisation.Workflow
name: seqPig
description: 
workflow: 
-  comment: '-'
   input: input1
   input2: '-'
   operation: LOAD
   options: vcf
   options2: seqpig
   relation: reads
-  comment: '-'
   input: '-'
   input2: '-'
   operation: SCRIPT
   options: "REGISTER piggybank.jar;\nREGISTER datafu-0.0.9.jar;\n-- parameters:\n-- \_* inputpath\n-\
      - \_* outputpath\n-- \_* parallelism (optional)\n\n\n\n\n-- Needs datafu for the variance funct\
      ion: https://github.com/linkedin/datafu\n-- Needs piggybank for the string LENGTH\n\n\n\n\n%def\
      ault parallelism 1\nset default_parallel $parallelism;\n\n\n\n\n-- speculative execution isn't \
      helping us much, so turn it off\nset mapred.map.tasks.speculative.execution false;\nset mapred.\
      reduce.tasks.speculative.execution false;\n\n\n\n\n-- Use in-memory aggregation, as possible\ns\
      et pig.exec.mapPartAgg true;\nset pig.exec.mapPartAgg.minReduction 5;\n\n\n\n\n-- new experimen\
      tal Pig feature -- generates specialized typed classes for the tuples\nset pig.schematuple on;\n\n\n\n\n\
      define VAR datafu.pig.stats.VAR();\n-- Calculate min, the 25th, 50th, 75th percentiles, and the\
      \ max\ndefine Quantile datafu.pig.stats.Quantile('5');\n-- define StreamingQuantile datafu.pig.\
      stats.StreamingQuantile('5');\ndefine STRLEN org.apache.pig.piggybank.evaluation.string.LENGTH(\
      );\n\n\n\n\n--\n-- \_ start of script\n--\n\n\n\n\n-- \_ import reads\n-- reads = load '$inputp\
      ath' using fi.aalto.seqpig.io.FastqLoader();\nreads_by_bases = FOREACH reads GENERATE fi.aalto.\
      seqpig.UnalignedReadSplit(sequence, quality);\n\n\n\n\n------- read stats\n\n\n\n\n-- read leng\
      th\nread_len = FOREACH reads GENERATE STRLEN(sequence);\nread_len_counts = FOREACH (GROUP read_\
      len BY $0) GENERATE group AS len, COUNT_STAR($1) as count;\n\n\n\n\n-- per sequence avg base qu\
      ality\n-- read_q = FOREACH reads_by_bases GENERATE ROUND(AVG($0.basequal)) as read_qual;\n-- re\
      ad_q_counts = FOREACH (GROUP read_q BY read_qual) GENERATE group as avg_read_qual, COUNT_STAR($\
      1) as count;\n\n\n\n\nread_seq_qual = FOREACH reads GENERATE quality;\navgbase_qual_counts = FO\
      REACH (GROUP read_seq_qual ALL) GENERATE fi.aalto.seqpig.stats.AvgBaseQualCounts($1.$0);\nforma\
      tted_avgbase_qual_counts = FOREACH avgbase_qual_counts GENERATE FLATTEN(fi.aalto.seqpig.stats.F\
      ormatAvgBaseQualCounts($0));\n\n\n\n\n\n\n\n\n------- generate output\n\n\n\n\n-- STORE read_le\
      n_counts INTO '$outputpath/read_len_counts';\n-- STORE read_q_counts INTO '$outputpath/read_q_c\
      ounts';\n-- STORE formatted_avgbase_qual_counts INTO '$outputpath/read_q_counts';\n"
   options2: '-'
   relation: script
-  comment: '-'
   input: read_len_counts
   input2: '-'
   operation: STORE
   options: '-'
   options2: '-'
   relation: output1
-  comment: '-'
   input: formatted_avgbase_qual_counts
   input2: '-'
   operation: STORE
   options: '-'
   options2: '-'
   relation: output2
